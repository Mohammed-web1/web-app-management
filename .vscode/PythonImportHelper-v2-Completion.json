[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "resolve_url",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0001_initial",
        "description": "account.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=20)),",
        "detail": "account.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0002_user_user",
        "description": "account.migrations.0002_user_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('account', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='user',\n            field=models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, to='auth.user'),",
        "detail": "account.migrations.0002_user_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0003_alter_user_user",
        "description": "account.migrations.0003_alter_user_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('account', '0002_user_user'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL),",
        "detail": "account.migrations.0003_alter_user_user",
        "documentation": {}
    },
    {
        "label": "AccountConfig",
        "kind": 6,
        "importPath": "account.apps",
        "description": "account.apps",
        "peekOfCode": "class AccountConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'account'",
        "detail": "account.apps",
        "documentation": {}
    },
    {
        "label": "SignUpForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class SignUpForm(UserCreationForm):\n    email = forms.CharField(max_length=255,required=True,widget=forms.EmailInput())\n    name = forms.CharField( max_length = 20)\n    last_name = forms.CharField( max_length = 20)\n    role = forms.ChoiceField(choices=rols)\n    class Meta:\n        model=User\n        fields = {'name','last_name','role','username','email','password1','password2'}",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class User(models.Model):\n    user =models.ForeignKey(user_admin,related_name='user',on_delete=models.CASCADE)\n    name = models.CharField( max_length = 20)\n    last_name = models.CharField( max_length = 20)\n    mail = models.EmailField( max_length = 20)\n    role = models.CharField(\n        max_length = 20,\n        choices = rols,\n        default = '1')\n    password = models.CharField( max_length = 21)",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "rols",
        "kind": 5,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "rols = (\n    (\"admin\", \"admin\"),\n    (\"employer\", \"employer\"),\n    (\"help desk\", \"help desk\"),\n    (\"technicien\", \"technicien\"),\n)\nclass User(models.Model):\n    user =models.ForeignKey(user_admin,related_name='user',on_delete=models.CASCADE)\n    name = models.CharField( max_length = 20)\n    last_name = models.CharField( max_length = 20)",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "account.urls",
        "description": "account.urls",
        "peekOfCode": "urlpatterns = [\n    #path('', views.login),\n    # path('',views.login , name='login'),\n    path('tech',views.tech , name='tech'),\n    path('help_desk',views.help_desk , name='help_desk'),\n    path('employer',views.employer , name='employer'),\n    path('admin',views.admin , name='admin'),\n    path('register',views.register , name='register'),\n    path('logout/',auth_views.LogoutView.as_view(),name='logout'),\n    #path('',auth_views.LoginView.as_view(template_name='index/index.html'),name='login'),",
        "detail": "account.urls",
        "documentation": {}
    },
    {
        "label": "MyLoginView",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class MyLoginView(LoginView):\n    def get_success_url(self):\n        role = User.objects.filter(user=self.request.user).values('role')\n        if role[0]['role'] == 'technicien':\n            url = self.get_redirect_url()\n            return url or resolve_url(settings.LOGIN_REDIRECT_URL_TECH)\n        elif role[0]['role'] == 'help desk':\n            url = self.get_redirect_url()\n            return url or resolve_url(settings.LOGIN_REDIRECT_URL_HD)\n        elif role[0]['role'] == 'employer':",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def register(request):\n    form = SignUpForm()\n    form.order_fields(field_order=['name','last_name','role','username','email','password1','password2'])\n    if request.method =='POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            print(form)\n            user = form.save()\n            print(user)\n            #auth_login(request,user)",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "gestion",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def gestion(request):\n    return render(request,'admin/gestion.html')\n@login_required\ndef rappstas(request):\n    return render(request,'admin/rappstas.html')\n@login_required\ndef securité(request):\n    return render(request,'admin/securité.html')\n@login_required\ndef surveil(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "rappstas",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def rappstas(request):\n    return render(request,'admin/rappstas.html')\n@login_required\ndef securité(request):\n    return render(request,'admin/securité.html')\n@login_required\ndef surveil(request):\n    return render(request,'admin/surveil.html')\n@login_required\ndef etatdedem(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "securité",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def securité(request):\n    return render(request,'admin/securité.html')\n@login_required\ndef surveil(request):\n    return render(request,'admin/surveil.html')\n@login_required\ndef etatdedem(request):\n    return render(request,'employer/etatdedem.html')\n@login_required\ndef info(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "surveil",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def surveil(request):\n    return render(request,'admin/surveil.html')\n@login_required\ndef etatdedem(request):\n    return render(request,'employer/etatdedem.html')\n@login_required\ndef info(request):\n    return render(request,'employer/info.html')\n@login_required\ndef notif(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "etatdedem",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def etatdedem(request):\n    return render(request,'employer/etatdedem.html')\n@login_required\ndef info(request):\n    return render(request,'employer/info.html')\n@login_required\ndef notif(request):\n    return render(request,'employer/notif.html')\n@login_required\ndef prodem(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def info(request):\n    return render(request,'employer/info.html')\n@login_required\ndef notif(request):\n    return render(request,'employer/notif.html')\n@login_required\ndef prodem(request):\n    return render(request,'employer/prodem.html')\n@login_required\ndef assistance(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "notif",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def notif(request):\n    return render(request,'employer/notif.html')\n@login_required\ndef prodem(request):\n    return render(request,'employer/prodem.html')\n@login_required\ndef assistance(request):\n    return render(request,'help disk/assistance.html')\n@login_required\ndef connaissance(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "prodem",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def prodem(request):\n    return render(request,'employer/prodem.html')\n@login_required\ndef assistance(request):\n    return render(request,'help disk/assistance.html')\n@login_required\ndef connaissance(request):\n    return render(request,'help disk/connaissance.html')\n@login_required\ndef demand(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "assistance",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def assistance(request):\n    return render(request,'help disk/assistance.html')\n@login_required\ndef connaissance(request):\n    return render(request,'help disk/connaissance.html')\n@login_required\ndef demand(request):\n    return render(request,'help disk/demand.html')\n@login_required\ndef redirection(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "connaissance",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def connaissance(request):\n    return render(request,'help disk/connaissance.html')\n@login_required\ndef demand(request):\n    return render(request,'help disk/demand.html')\n@login_required\ndef redirection(request):\n    return render(request,'help disk/redirection.html')\n@login_required\ndef comm(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "demand",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def demand(request):\n    return render(request,'help disk/demand.html')\n@login_required\ndef redirection(request):\n    return render(request,'help disk/redirection.html')\n@login_required\ndef comm(request):\n    return render(request,'technicien/comm.html')\n@login_required\ndef GPI(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "redirection",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def redirection(request):\n    return render(request,'help disk/redirection.html')\n@login_required\ndef comm(request):\n    return render(request,'technicien/comm.html')\n@login_required\ndef GPI(request):\n    return render(request,'technicien/GPI.html')\n@login_required\ndef GTA(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "comm",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def comm(request):\n    return render(request,'technicien/comm.html')\n@login_required\ndef GPI(request):\n    return render(request,'technicien/GPI.html')\n@login_required\ndef GTA(request):\n    return render(request,'technicien/GTA.html')\n@login_required\ndef ticket(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "GPI",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def GPI(request):\n    return render(request,'technicien/GPI.html')\n@login_required\ndef GTA(request):\n    return render(request,'technicien/GTA.html')\n@login_required\ndef ticket(request):\n    return render(request,'technicien/ticket.html')\n@login_required\ndef tech(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "GTA",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def GTA(request):\n    return render(request,'technicien/GTA.html')\n@login_required\ndef ticket(request):\n    return render(request,'technicien/ticket.html')\n@login_required\ndef tech(request):\n    role = User.objects.filter(user=request.user)\n    role = request.user\n    #print(role.objects.get(role))",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "ticket",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def ticket(request):\n    return render(request,'technicien/ticket.html')\n@login_required\ndef tech(request):\n    role = User.objects.filter(user=request.user)\n    role = request.user\n    #print(role.objects.get(role))\n    role = User.objects.filter(user=request.user).values('role')\n    if role[0]['role'] == 'technicien':\n        return render(request,'technicien/technicien.html',{'x':role})",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "tech",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def tech(request):\n    role = User.objects.filter(user=request.user)\n    role = request.user\n    #print(role.objects.get(role))\n    role = User.objects.filter(user=request.user).values('role')\n    if role[0]['role'] == 'technicien':\n        return render(request,'technicien/technicien.html',{'x':role})\n    else:\n        return render(request,'404.html')\n@login_required",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "help_desk",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def help_desk(request):\n    username = request.user\n    #print(role.objects.get(role))\n    role = User.objects.filter(user=request.user).values('role')\n    if role[0]['role'] == 'help desk':\n        return render(request,'help disk/help.html',{'username':username})\n    else:\n        return render(request,'404.html')\n@login_required\ndef employer(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "employer",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def employer(request):\n    username = request.user\n    #print(role.objects.get(role))\n    role = User.objects.filter(user=request.user).values('role')\n    if role[0]['role'] == 'employer':\n        return render(request,'employer/employe.html',{'username':username})\n    else:\n        return render(request,'404.html')\n@login_required\ndef admin(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def admin(request):\n    username = request.user\n    #print(role.objects.get(role))\n    role = User.objects.filter(user=request.user).values('role')\n    if role[0]['role'] == 'admin':\n        return render(request,'admin/admin.html',{'username':username})\n    else:\n        return render(request,'404.html')\nclass MyLoginView(LoginView):\n    def get_success_url(self):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.asgi",
        "description": "project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-kmi=#qe8h-5oa2&#1#3g@t!x@-)or!jwen%b(#3g^p@6jy082q'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-kmi=#qe8h-5oa2&#1#3g@t!x@-)or!jwen%b(#3g^p@6jy082q'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'account.apps.AccountConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'account.apps.AccountConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'account.apps.AccountConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'account.apps.AccountConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'widget_tweaks',\n]",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'project.urls'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ROOT_URLCONF = 'project.urls'\nimport os\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,\"web-app-management\")],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,\"web-app-management\")],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR,\"static\")\nSTATICFILES_DIRS = [",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR,\"static\")\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR,\"project/static\")",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR,\"static\")\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR,\"project/static\")\n]",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR,\"static\")\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR,\"project/static\")\n]\n# Default primary key field type",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR,\"static\")\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR,\"project/static\")\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR,\"static\")\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR,\"project/static\")\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGOUT_REDIRECT_URL = 'login'\nLOGIN_REDIRECT_URL_TECH = 'tech'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR,\"static\")\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR,\"project/static\")\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGOUT_REDIRECT_URL = 'login'\nLOGIN_REDIRECT_URL_TECH = 'tech'\nLOGIN_REDIRECT_URL_HD = 'help_desk'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR,\"project/static\")\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGOUT_REDIRECT_URL = 'login'\nLOGIN_REDIRECT_URL_TECH = 'tech'\nLOGIN_REDIRECT_URL_HD = 'help_desk'\nLOGIN_REDIRECT_URL_EMP = 'employer'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGOUT_REDIRECT_URL = 'login'\nLOGIN_REDIRECT_URL_TECH = 'tech'\nLOGIN_REDIRECT_URL_HD = 'help_desk'\nLOGIN_REDIRECT_URL_EMP = 'employer'\nLOGIN_REDIRECT_URL_ADMIN = 'admin'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = 'login'\nLOGIN_REDIRECT_URL_TECH = 'tech'\nLOGIN_REDIRECT_URL_HD = 'help_desk'\nLOGIN_REDIRECT_URL_EMP = 'employer'\nLOGIN_REDIRECT_URL_ADMIN = 'admin'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL_TECH",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL_TECH = 'tech'\nLOGIN_REDIRECT_URL_HD = 'help_desk'\nLOGIN_REDIRECT_URL_EMP = 'employer'\nLOGIN_REDIRECT_URL_ADMIN = 'admin'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL_HD",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL_HD = 'help_desk'\nLOGIN_REDIRECT_URL_EMP = 'employer'\nLOGIN_REDIRECT_URL_ADMIN = 'admin'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL_EMP",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL_EMP = 'employer'\nLOGIN_REDIRECT_URL_ADMIN = 'admin'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL_ADMIN",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL_ADMIN = 'admin'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('account.urls')),\n]",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.wsgi",
        "description": "project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project.wsgi",
        "documentation": {}
    },
    {
        "label": "add_data",
        "kind": 2,
        "importPath": "web-app-management.admin.main",
        "description": "web-app-management.admin.main",
        "peekOfCode": "def add_data():\n    data = request.json\n    query = \"INSERT INTO ma_table (colonne1, colonne2) VALUES (%s, %s)\"\n    values = (data['valeur1'], data['valeur2'])\n    cursor.execute(query, values)\n    db.commit()\n    return jsonify({\"message\": \"Données ajoutées avec succès\"})\n# Route pour récupérer toutes les données de la base de données\n@app.route('/get_data', methods=['GET'])\ndef get_data():",
        "detail": "web-app-management.admin.main",
        "documentation": {}
    },
    {
        "label": "get_data",
        "kind": 2,
        "importPath": "web-app-management.admin.main",
        "description": "web-app-management.admin.main",
        "peekOfCode": "def get_data():\n    query = \"SELECT * FROM ma_table\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    data_list = []\n    for row in result:\n        data_list.append({\n            \"colonne1\": row[0],\n            \"colonne2\": row[1]\n        })",
        "detail": "web-app-management.admin.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web-app-management.admin.main",
        "description": "web-app-management.admin.main",
        "peekOfCode": "app = Flask(__name__)\n# Connexion à la base de données MySQL\ndb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"votre_utilisateur\",\n    password=\"votre_mot_de_passe\",\n    database=\"ma_base_de_donnees\"\n)\ncursor = db.cursor()\n# Route pour ajouter des données à la base de données",
        "detail": "web-app-management.admin.main",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "web-app-management.admin.main",
        "description": "web-app-management.admin.main",
        "peekOfCode": "db = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"votre_utilisateur\",\n    password=\"votre_mot_de_passe\",\n    database=\"ma_base_de_donnees\"\n)\ncursor = db.cursor()\n# Route pour ajouter des données à la base de données\n@app.route('/add_data', methods=['POST'])\ndef add_data():",
        "detail": "web-app-management.admin.main",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "web-app-management.admin.main",
        "description": "web-app-management.admin.main",
        "peekOfCode": "cursor = db.cursor()\n# Route pour ajouter des données à la base de données\n@app.route('/add_data', methods=['POST'])\ndef add_data():\n    data = request.json\n    query = \"INSERT INTO ma_table (colonne1, colonne2) VALUES (%s, %s)\"\n    values = (data['valeur1'], data['valeur2'])\n    cursor.execute(query, values)\n    db.commit()\n    return jsonify({\"message\": \"Données ajoutées avec succès\"})",
        "detail": "web-app-management.admin.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]